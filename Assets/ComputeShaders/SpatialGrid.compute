#pragma kernel bitonicSort

// Input/Output Buffer
RWStructuredBuffer<uint> keys; 

int particles_amount;

[numthreads(128, 1, 1)]
void bitonicSort(uint index : SV_DispatchThreadID)
{
    for (uint size = 2; size <= particles_amount; size *= 2)
    {
        for (uint stride = size / 2; stride > 0; stride /= 2)
        {
            // Find the partner index
            uint partner_index = index ^ stride;
            // Ensure valid indices
            if (partner_index > index) 
            {
                // Ascending or Descending order
                uint ascending = (index & size) == 0; 
                uint val1 = keys[index];
                uint val2 = keys[partner_index];

                // Compare and swap
                if (val1 > val2 == ascending) 
                {
                    keys[index] = val2;
                    keys[partner_index] = val1;
                }
            }
            GroupMemoryBarrierWithGroupSync();
        }
    }
}