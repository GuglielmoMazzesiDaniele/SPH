// KERNELS
#pragma kernel reset_histogram
#pragma kernel calculate_histogram

// CONSTANTS

// Amount of threads per group
static const int thread_group_size = 256;
// Amount of items managed by each eps algorithm's group.
static const uint eps_items_per_group = thread_group_size * 2;

// VARIABLES

// Core buffers, used by the simulation to execute neighbours each.
RWStructuredBuffer<uint> spatial_keys;
RWStructuredBuffer<uint> spatial_indices;
RWStructuredBuffer<uint> spatial_offsets;

// Auxiliary buffers, used by the sorting algorithm
RWStructuredBuffer<uint> sorted_keys;
RWStructuredBuffer<uint> sorted_indices;

// Core buffer of the algorithm.
// At the beginning of the sorting process it contains the histogram of the spatial grid hashed keys
// distribution within the simulation.
// The simulation is in charge of filling the distribution before calling the sorting algorithm.
// To the buffer is then applied an exclusive prefix sum parallel algorithm. This effectively results in knowing the
// initial array within the global array of each histogram's bin. This information is the used to compute the offsets
// per key and to scatter the original data into a sorted buffer.
RWStructuredBuffer<uint> keys_histogram;

// Auxiliary buffers, used by the eps (exclusive prefix sum) algorithm. 
RWStructuredBuffer<uint> target;
RWStructuredBuffer<uint> group_sums;
// Size of the current target buffer on which the eps algorithm is running. Changed dynamically by CPU.
uint target_size;
// Shared memory used by each group executing the eps algorithm. Improves efficiency and reduce latency due to absence
// of main memory access.
groupshared uint eps_temp[eps_items_per_group];

// Variables provided by the CPU
int particles_amount;

[numthreads(thread_group_size, 1, 1)]
void reset_histogram(uint id : SV_DispatchThreadID)
{
    // Resetting only valid thread ids
    if(id >= particles_amount)
        return;

    // Resetting the bins of the histogram
    keys_histogram[id] = 0;
    // Resetting the order of the spatial indices
    spatial_indices[id] = id;
}

[numthreads(thread_group_size, 1, 1)]
void calculate_histogram(uint id : SV_DispatchThreadID)
{
    // Calculating using only valid thread ids
    if(id >= particles_amount)
        return;

    // Obtaining the key of the current thread from the spatial keys buffer
    uint key = spatial_keys[id];;

    // Increasing the corresponding bin within the histogram by one
    InterlockedAdd(keys_histogram[key], 1);
}