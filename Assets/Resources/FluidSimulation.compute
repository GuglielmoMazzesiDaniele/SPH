// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel update_predicted_positions
#pragma kernel update_spatial_keys
#pragma kernel reorder_buffers
#pragma kernel copy_auxiliary_in_main
#pragma kernel update_densities
#pragma kernel update_position_and_velocity
#pragma kernel update_density_map

// CONSTANTS
static const int thread_group_size = 512;

// MACROS
#define COLLISION_MODE_BOX 0
#define COLLISION_MODE_CYLINDER 1

// GPU RELATED DATA

// Buffer containing the data of the simulation
RWStructuredBuffer<float3> positions;
RWStructuredBuffer<float3> predicted_positions;
RWStructuredBuffer<float3> velocities;
RWStructuredBuffer<float> densities;
RWStructuredBuffer<float> near_densities;

// Spatial Hashing Grid's buffers
RWStructuredBuffer<uint> spatial_keys;
RWStructuredBuffer<uint> spatial_indices;
RWStructuredBuffer<uint> spatial_offsets;

// Ray-marching rendering texture map
RWTexture3D<float> density_map;

// Auxiliary buffers used during the resorting process
RWStructuredBuffer<float3> auxiliary_positions;
RWStructuredBuffer<float3> auxiliary_predicted_positions;
RWStructuredBuffer<float3> auxiliary_velocities;

// Spatial Hashing 3D offsets
static const int3 cell_offsets_3D[27] =
{
    int3 (-1,  1,  1),
    int3 ( 0,  1,  1),
    int3 ( 1,  1,  1),
    int3 (-1,  0,  1),
    int3 ( 0,  0,  1),
    int3 ( 1,  0,  1),
    int3 (-1, -1,  1),
    int3 ( 0, -1,  1),
    int3 ( 1, -1,  1),
    int3 (-1,  1,  0),
    int3 ( 0,  1,  0),
    int3 ( 1,  1,  0),
    int3 (-1,  0,  0),
    int3 ( 0,  0,  0),
    int3 ( 1,  0,  0),
    int3 (-1, -1,  0),
    int3 ( 0, -1,  0),
    int3 ( 1, -1,  0),
    int3 (-1,  1, -1),
    int3 ( 0,  1, -1),
    int3 ( 1,  1, -1),
    int3 (-1,  0, -1),
    int3 ( 0,  0, -1),
    int3 ( 1,  0, -1),
    int3 (-1, -1, -1),
    int3 ( 0, -1, -1),
    int3 ( 1, -1, -1),
};

// CPU PROVIDED DATA

// Simulation related fields
int particles_amount;
float delta_time;
float3 external_forces_acceleration;
float particle_mass;
float rest_density;
float stiffness;
float near_density;
float viscosity;
float collision_damping;
int collision_mode;
float3 bounds_size;
float3 half_bounds_size;
float4x4 world_to_local;
float4x4 local_to_world;

// Kernel related fields
float kernel_radius;
float sqr_kernel_radius;
float poly6_normalization;
float spiky_gradient_first_term;
float viscosity_laplacian_first_term;

// Constants used for hashing
static const uint hash_k1 = 15823;
static const uint hash_k2 = 9737333;
static const uint hash_k3 = 440817757;

// Ray-marching related fields
const int3 density_map_size;

// Computes the influence at the given squared distance using the kernel: (radius^2 - distance^2)^3
float poly6(float sqr_distance)
{
    // Computing the influence at given distance
    return poly6_normalization * pow(sqr_kernel_radius - sqr_distance, 3); 
}

// Computes the gradient of the Spiky kernel at the given distance
float spiky_gradient(float distance)
{
    return spiky_gradient_first_term * pow(distance - kernel_radius, 2);
}

// Computes the laplacian of the Viscosity kernel at the given distance
float viscosity_laplacian(float distance)
{
    return viscosity_laplacian_first_term * (kernel_radius - distance);
}

// Computes the influence at the given distance using the kernel: (1 - distance / radius) ^ 2
float exponential_falloff(float distance)
{
    return pow(1 - distance / kernel_radius, 1);
}

// Computes the gradient of the exponential falloff kernel at the given distance
float exponential_falloff_gradient(float distance)
{
    return - (2 / kernel_radius) * pow(1 - distance / kernel_radius, 2 - 1);
}

// Resolve particles collision with the entire simulation, which is a box
void resolve_collision_box(uint target_particle_index)
{
    // Extracting the current particle position and velocity from the buffers and converting in local space
    float3 local_position = mul(world_to_local, float4(positions[target_particle_index], 1.0f)).xyz;
    float3 local_velocity = mul(world_to_local, float4(velocities[target_particle_index], 0.0f)).xyz;
    
    // Case in which the particle collided with the bounds on X-axis
    if (abs(local_position.x) > half_bounds_size.x)
    {
        // Setting the position x to the maximum
        local_position.x = half_bounds_size.x * sign(local_position.x);
        // Flipping the velocity sign and applying a damping
        local_velocity.x *= -collision_damping;
    }
        
    // Case in which the particle collided with the bounds on Y-axis
    if (abs(local_position.y) > half_bounds_size.y)
    {
        // Setting the position y to the maximum
        local_position.y = half_bounds_size.y * sign(local_position.y);
        // Flipping the velocity sign and applying a damping
        local_velocity.y *= -collision_damping;
    }

    // Case in which the particle collided with the bounds on Z-axis
    if (abs(local_position.z) > half_bounds_size.z)
    {
        // Setting the position y to the maximum
        local_position.z = half_bounds_size.z * sign(local_position.z);
        // Flipping the velocity sign and applying a damping
        local_velocity.z *= -collision_damping;
    }

    // Radius if the internal sphere
    // float sphere_radius = 3.0f;
    //
    // // COLLISION WITH THE SPHERE
    // if(length(local_position) < sphere_radius)
    // {
    //     // Computing the sphere normal
    //     float3 sphere_normal = normalize(local_position);
    //     
    //     // Reflecting the velocity
    //     local_velocity = reflect(local_velocity, sphere_normal) * collision_damping;
    //     
    //     // Computing the sphere normal
    //     local_position = sphere_radius * sphere_normal;
    // }

    // Converting back in world space
    positions[target_particle_index] = mul(local_to_world, float4(local_position, 1.0f)).xyz;
    velocities[target_particle_index] = mul(local_to_world, float4(local_velocity, 0.0f)).xyz;
}

// Resolve particles collision with an invisible cylinder placed at the origin
void resolve_collision_cylinder(uint target_particle_index)
{
    // Extracting the current particle position and velocity from the buffers and converting in local space
    float3 local_position = mul(world_to_local, float4(positions[target_particle_index], 1.0f)).xyz;
    float3 local_velocity = mul(world_to_local, float4(velocities[target_particle_index], 0.0f)).xyz;

    // Computing the smallest horizontal axis
    float cylinder_radius = min(half_bounds_size.x, half_bounds_size.z);

    // Resolving collisions
    if (length(local_position.xz) > cylinder_radius)
    {
        // Computing the cylinder normal that intersects the current position
        float2 normal = normalize(local_position.xz);

        // Clamping the position on the cylinder surface
        local_position.xz  = normal * cylinder_radius;

        // Reflecting the velocity
        local_velocity.xz = reflect(local_velocity.xz, normal) * collision_damping;
    }

    // Vertical collision (Y caps)
    if (abs(local_position.y) > half_bounds_size.y)
    {
        // Clamping the position to the max position on the Y axis based on the sign
        local_position.y = sign(local_position.y) * half_bounds_size.y;
        
        // Applying the collision damping
        local_velocity.y *= -collision_damping;
    }

    // Converting back in world space
    positions[target_particle_index] = mul(local_to_world, float4(local_position, 1.0f)).xyz;
    velocities[target_particle_index] = mul(local_to_world, float4(local_velocity, 0.0f)).xyz;
}

// Based on the current simulation configuration, resolve the collision with the boundaries
void resolve_collision(uint target_particle_index)
{
    // Calling the correct function based on the active configuration
    if(collision_mode == COLLISION_MODE_BOX)
        resolve_collision_box(target_particle_index);
    if(collision_mode == COLLISION_MODE_CYLINDER)
        resolve_collision_cylinder(target_particle_index);
}

// Converts given density into pressure
float convert_density_to_pressure(float density)
{
    return stiffness * (density - rest_density);
}

// Calculate the shared pressure between two densities
float calculate_shared_pressure(float first_density, float second_density)
{
    // Converting both densities to pressure 
    float first_pressure = convert_density_to_pressure(first_density);
    float second_pressure = convert_density_to_pressure(second_density);

    // Computing the pressure that respects Newton's Third Law of Motion (as explained by Sebastian Lague)
    return (first_pressure + second_pressure) / 2;
}

// Converts given near density into near pressure
float convert_near_density_to_near_pressure(float density)
{
    return near_density * pow(density, 2);
}

// Calculate the shared near pressure between two near densities
float calculate_shared_near_pressure(float first_near_density, float second_near_density)
{
    // Converting both densities to pressure 
    float first_near_pressure = convert_near_density_to_near_pressure(first_near_density);
    float second_near_pressure = convert_near_density_to_near_pressure(second_near_density);

    // Computing the pressure that respects Newton's Third Law of Motion (as explained by Sebastian Lague)
    return (first_near_pressure + second_near_pressure) / 2;
}

// Given a position in world space, returns its corresponding spatial grid's hash value
int3 position_to_cell_coords(float3 position)
{
    // Computing the coordinates with respect to the kernel radius
    return (int3)floor(position / kernel_radius);
}

// Given two uint3 return 1 if they are identical, 0 otherwise
uint are_int3_equal(int3 first, int3 second)
{
    return all(first == second);
}

// Given a cell position in the spatial grid, returns its corresponding hash value mod particles_amount
uint hash_cell(int3 cell_coords)
{
    // Mapping the cell coordinates to a block
    const uint block_size = 50;
    uint3 cell_coords_uint = (cell_coords + block_size / 2);

    // Computing the variables relative to the block
    uint3 local_cell = cell_coords_uint % block_size;
    uint3 block_id = cell_coords_uint / block_size;
    uint block_hash = block_id.x * hash_k1 + block_id.y * hash_k2 + block_id.z * hash_k3;

    // Computing the hash value of the cell coordinates mod particles_amount
    return (local_cell.x + block_size * (local_cell.y + block_size * local_cell.z) + block_hash) % particles_amount;
}

// Given a position in world space, returns the density at the position
float calculate_density_at_position(float3 position)
{
    // Computing the coordinates of the grid cell containing the target particle
    int3 target_cell_coords = position_to_cell_coords(position);

    // Initializing the density of the target particle
    float density = 0.0f;
    
    // Neighbours search
    for(int i = 0; i < 27; i++)
    {
        // Computing the current cell coordinates
        int3 current_cell_coords = target_cell_coords + cell_offsets_3D[i];
        
        // Computing the key of the central cell + the current offset
        uint current_cell_key = hash_cell(current_cell_coords);
        
        // Iterating all neighbours within the current cell
        for(uint current_particle_index = spatial_offsets[current_cell_key];
            current_particle_index < particles_amount && spatial_keys[current_particle_index] == current_cell_key;
            current_particle_index++)
        {
            // Storing the predicted position of the current particle
            float3 current_particle_pred_pos = predicted_positions[current_particle_index];
            
            // Verifying that the current particle actually belongs to the current cell
            if(!are_int3_equal(current_cell_coords, position_to_cell_coords(current_particle_pred_pos)))
                continue;
            
            // Computing the vector between the current particle and the target
            float3 current_to_target = current_particle_pred_pos - position;
    
            // Computing the squared distance
            float sqr_distance = dot(current_to_target, current_to_target);
    
            // If the particle is outside kernel radius, continue
            if(sqr_distance >= sqr_kernel_radius)
                continue;
    
            // Adding the current particle influence to the target particle density
            density += particle_mass * poly6(sqr_distance);
        }
    }

    return density;
}

// Given a position in world space, returns the near density at the position
float calculate_near_density_at_position(float3 position)
{
    // Computing the coordinates of the grid cell containing the target particle
    int3 target_cell_coords = position_to_cell_coords(position);

    // Initializing the near density of the target particle
    float near_density = 0.0f;
    
    // Neighbours search
    for(int i = 0; i < 27; i++)
    {
        // Computing the current cell coordinates
        int3 current_cell_coords = target_cell_coords + cell_offsets_3D[i];
        
        // Computing the key of the central cell + the current offset
        uint current_cell_key = hash_cell(current_cell_coords);
        
        // Iterating all neighbours within the current cell
        for(uint current_particle_index = spatial_offsets[current_cell_key];
            current_particle_index < particles_amount && spatial_keys[current_particle_index] == current_cell_key;
            current_particle_index++)
        {
            // Storing the predicted position of the current particle
            float3 current_particle_pred_pos = predicted_positions[current_particle_index];
            
            // Verifying that the current particle actually belongs to the current cell
            if(!are_int3_equal(current_cell_coords, position_to_cell_coords(current_particle_pred_pos)))
                continue;
            
            // Computing the vector between the current particle and the target
            float3 current_to_target = current_particle_pred_pos - position;
    
            // Computing the squared distance
            float sqr_distance = dot(current_to_target, current_to_target);
    
            // If the particle is outside kernel radius, continue
            if(sqr_distance >= sqr_kernel_radius)
                continue;
    
            // Adding the current particle influence to the target particle near density
            near_density += particle_mass * exponential_falloff(sqrt(sqr_distance));
        }
    }

    return near_density;
}

[numthreads(thread_group_size, 1, 1)]
void reorder_buffers(uint target_particle_index : SV_DispatchThreadID)
{
    // Avoid using invalid indices
    if(target_particle_index >= particles_amount)
        return;

    // Mapping sorted indices to unsorted indices
    uint unsorted_index = spatial_indices[target_particle_index];

    // Shifting the data from the main buffers to the auxiliary buffers to for a sorted buffer
    auxiliary_positions[target_particle_index] = positions[unsorted_index];
    auxiliary_predicted_positions[target_particle_index] = predicted_positions[unsorted_index];
    auxiliary_velocities[target_particle_index] = velocities[unsorted_index];
}

[numthreads(thread_group_size, 1, 1)]
void copy_auxiliary_in_main(uint target_particle_index : SV_DispatchThreadID)
{
    // Avoid using invalid indices
    if(target_particle_index >= particles_amount)
        return;

    // Moving the data from the auxiliary buffers to the main buffers
    positions[target_particle_index] = auxiliary_positions[target_particle_index];
    predicted_positions[target_particle_index] = auxiliary_predicted_positions[target_particle_index];
    velocities[target_particle_index] = auxiliary_velocities[target_particle_index];
}

[numthreads(thread_group_size, 1, 1)]
void update_predicted_positions(uint target_particle_index : SV_DispatchThreadID)
{
    // Apply the process only using valid ids
    if(target_particle_index >= particles_amount)
        return;

    // Storing the position and velocity of the target particle
    float3 target_particle_pos = positions[target_particle_index];
    float3 target_particle_vel = velocities[target_particle_index];

    // Adding to the target particle velocity the external acceleration
    target_particle_vel += external_forces_acceleration;
    
    // Computing the predicted position of the target particle
    float3 target_particle_pred_pos = target_particle_pos
        + target_particle_vel * delta_time;

    // Storing the computed data in the global buffer
    predicted_positions[target_particle_index] = target_particle_pred_pos;
}

[numthreads(thread_group_size, 1, 1)]
void update_spatial_keys(uint target_particle_index : SV_DispatchThreadID)
{
    // Apply the process only using valid ids
    if(target_particle_index >= particles_amount)
        return;

    // Computing the predicted position of the target particle
    float3 target_particle_pred_pos = predicted_positions[target_particle_index];

    // Computing the spatial key of the target particle predicted position
    uint target_particle_spatial_key = hash_cell(position_to_cell_coords(target_particle_pred_pos));

    // Storing the computed data in the global buffer
    spatial_keys[target_particle_index] = target_particle_spatial_key;
}

[numthreads(thread_group_size, 1, 1)]
void update_densities(uint target_particle_index : SV_DispatchThreadID)
{
    // Apply the process only using valid ids
    if(target_particle_index >= particles_amount)
        return;
    
    // Updating target particle density
    densities[target_particle_index] = calculate_density_at_position(predicted_positions[target_particle_index]);

    // Updating target particle near density
    near_densities[target_particle_index] =
        calculate_near_density_at_position(predicted_positions[target_particle_index]);
}

[numthreads(thread_group_size, 1, 1)]
void update_position_and_velocity(uint target_particle_index : SV_DispatchThreadID)
{
    // Apply the process only using valid ids
    if(target_particle_index >= particles_amount)
        return;
    
    // Initializing the new acceleration of the target particle
    float3 internal_forces = 0.0f;

    // Storing the target particles predicted position, density and velocity
    float3 target_particle_pred_pos = predicted_positions[target_particle_index];
    float3 target_particle_velocity = velocities[target_particle_index];
    float target_particle_density = densities[target_particle_index];
    float target_particle_near_density = near_densities[target_particle_index];

    // Computing the coordinates of the grid cell containing the target particle
    int3 target_cell_coords = position_to_cell_coords(target_particle_pred_pos);
    
    // Neighbours search
    for(int i = 0; i < 27; i++)
    {
        // Computing the current cell coordinates
        uint3 current_cell_coords = target_cell_coords + cell_offsets_3D[i];
        
        // Computing the key of the central cell + the current offset
        uint current_cell_key = hash_cell(current_cell_coords);
        
        // Iterating all neighbours within the current cell
        for(uint current_particle_index = spatial_offsets[current_cell_key];
            current_particle_index < particles_amount && spatial_keys[current_particle_index] == current_cell_key;
            current_particle_index++)
        {
            // Skipping calculation for the particle by itself
            if(target_particle_index == current_particle_index)
                continue;
            
            // Storing the predicted position of the current particle
            float3 current_particle_pred_pos = predicted_positions[current_particle_index];
            
            // Verifying that the current particle actually belongs to the current cell
            if(!are_int3_equal(current_cell_coords, position_to_cell_coords(current_particle_pred_pos)))
                continue;

            // Computing the vector between the current particle and the target
            float3 diff_vector = current_particle_pred_pos - target_particle_pred_pos;

            // Computing the squared distance
            float sqr_distance = dot(diff_vector, diff_vector);

            // If the particle is outside kernel radius, continue
            if(sqr_distance >= sqr_kernel_radius || sqr_distance == 0)
                continue;

            // Computing the distance
            float distance = sqrt(sqr_distance);

            // Storing the current particle density
            float current_particle_density = densities[current_particle_index];

            // Storing the current particle near density
            float current_particle_near_density = near_densities[current_particle_index];

            // VISCOSITY
        
            // Computing the viscosity's influence of the current particle
            float viscosity_kernel = viscosity_laplacian(distance);

            // Computing the difference between velocities
            float3 velocities_difference = velocities[current_particle_index] - target_particle_velocity;

            // Computing the viscosity force
            float3 viscosity_force = particle_mass * viscosity_kernel * viscosity * velocities_difference;

            // PRESSURE

            // Computing the direction between the current particle and the point of interest
            float3 pressure_direction = distance == 0 ? float3(1, 0, 0) : diff_vector / distance;

            // Evaluating the slope of the kernel at the given distance
            float pressure_kernel = spiky_gradient(distance);
        
            // Computing the shared pressure force
            float shared_pressure = calculate_shared_pressure(current_particle_density, target_particle_density);

            // Computing the pressure force
            float3 pressure_force = particle_mass * shared_pressure * pressure_kernel * pressure_direction;

            // NEAR PRESSURE

            // Evaluating the slope of the kernel at the given distance
            float near_pressure_kernel_slope = exponential_falloff_gradient(distance);

            // Computing the shared near pressure force
            float shared_near_pressure = calculate_shared_pressure(current_particle_near_density,
                target_particle_near_density);

            // Computing the near pressure force
            float3 near_pressure_force = particle_mass * shared_near_pressure
                * -near_density * pressure_direction;

            // FINAL FORCE

            // Adding the result to the force
            internal_forces += (viscosity_force + pressure_force + near_pressure_force) / current_particle_density;
        }
    }

    // Computing the acceleration caused by the density field forces and multiplying it by delta time
    target_particle_velocity += internal_forces / target_particle_density * delta_time + external_forces_acceleration;
    
    // Updating the position and velocity of the particle
    velocities[target_particle_index] = target_particle_velocity;
    positions[target_particle_index] += target_particle_velocity * delta_time;
    
    // Collision detection
    resolve_collision(target_particle_index);
}

[numthreads(8, 8, 8)]
void update_density_map (uint3 target_density_map_index : SV_DispatchThreadID)
{
    // If the thread is situated outside the density map, skip
    if(target_density_map_index.x >= density_map_size.x ||
        target_density_map_index.y >= density_map_size.y ||
        target_density_map_index.z >= density_map_size.z)
        return;
    
    // Computing the normalized coordinates within the texture
    float3 normalized_texture_pos = target_density_map_index / (density_map_size - 1.0f);

    // Computing the equivalent in simulation local space
    float3 local_pos = (normalized_texture_pos - 0.5) * bounds_size;

    // Converting the position in world space
    float3 world_pos = mul(local_to_world, float4(local_pos, 1.0f)).xyz;

    // Storing the density value
    density_map[target_density_map_index] = calculate_density_at_position(world_pos) / rest_density;
}