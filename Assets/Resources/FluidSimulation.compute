// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel calculatePredictedPosition
#pragma kernel calculateSpatialHash
#pragma kernel calculateDensity
#pragma kernel calculateDeltaVelocity

// CONSTANTS
static const int thread_group_size = 256;

// GPU RELATED DATA

// Buffer containing the simulation
RWStructuredBuffer<float3> positions;
RWStructuredBuffer<float3> predicted_positions;
RWStructuredBuffer<float3> velocities;
RWStructuredBuffer<float> densities;

// Spatial Hashing Grid's buffers
RWStructuredBuffer<uint> spatial_keys;

// CPU PROVIDED DATA

// Simulation related fields
int particles_amount;

float delta_time;
float gravity;
float particle_mass;
float rest_density;
float stiffness;
float viscosity;

// Bounds related fields
float collision_damping;
float3 half_bounds;

// Kernel related fields
float kernel_radius;
float sqr_kernel_radius;
float poly6_normalization;
float spiky_gradient_first_term;
float viscosity_laplacian_first_term;

// Computes the influence at the given squared distance using the kernel: (radius^2 - distance^2)^3
float poly6(float sqr_distance)
{
    // Computing the influence at given distance
    return poly6_normalization * pow(sqr_kernel_radius - sqr_distance, 3); 
}

// Computes the gradient of the Spiky kernel at the given distance
float spiky_gradient(float distance)
{
    return spiky_gradient_first_term * pow(distance - kernel_radius, 2);
}

// Computes the laplacian of the Viscosity kernel at the given distance
float viscosity_laplacian(float distance)
{
    return viscosity_laplacian_first_term * (kernel_radius - distance);
}

// Resolve particles collision with simulation's bounds
void resolveCollision(uint target_particle_index)
{
    // Case in which the particle collided with the bounds on X-axis
    if (abs(positions[target_particle_index].x) > half_bounds.x)
    {
        // Setting the position x to the maximum
        positions[target_particle_index].x = half_bounds.x * sign(positions[target_particle_index].x);
        // Flipping the velocity sign and applying a damping
        velocities[target_particle_index].x *= -collision_damping;
    }
        
    // Case in which the particle collided with the bounds on Y-axis
    if (abs(positions[target_particle_index].y) > half_bounds.y)
    {
        // Setting the position y to the maximum
        positions[target_particle_index].y = half_bounds.y * sign(positions[target_particle_index].y);
        // Flipping the velocity sign and applying a damping
        velocities[target_particle_index].y *= -collision_damping;
    }

    // Case in which the particle collided with the bounds on Z-axis
    if (abs(positions[target_particle_index].z) > half_bounds.z)
    {
        // Setting the position y to the maximum
        positions[target_particle_index].z = half_bounds.z * sign(positions[target_particle_index].z);
        // Flipping the velocity sign and applying a damping
        velocities[target_particle_index].z *= -collision_damping;
    }
}

// Converts given density into pressure
float convertDensityToPressure(float density)
{
    return (density - rest_density) * stiffness;
}

// Calculate the shared pressure between two densities
float calculateSharedPressure(float first_density, float second_density)
{
    // Converting both densities to pressure 
    float first_pressure = convertDensityToPressure(first_density);
    float second_pressure = convertDensityToPressure(second_density);

    // Computing the pressure that respects Newton's Third Law of Motion (as explained by Sebastian Lague)
    return (first_pressure + second_pressure) / 2;
}

// Given a position in world space, returns its corresponding spatial grid's hash value
uint3 positionToCellCoordinates(float3 position)
{
    // Computing the coordinates with respect to the kernel radius
    return  (uint3) (position / kernel_radius);
}

// Given a cell position in the spatial grid, returns its corresponding hash value mod particles_amount
uint hashCell(uint3 cell_coords)
{
    // Multiplying the coordinates by three arbitrary prime number
    uint a = cell_coords.x * 73856093;
    uint b = cell_coords.y * 19349663;
    uint c = cell_coords.z * 83492791;
        
    // Returning the hashed value
    return (a ^ b ^ c) % particles_amount;
}

[numthreads(thread_group_size, 1, 1)]
void calculateSpatialHash(uint id : SV_DispatchThreadID)
{
    // Apply the process only using valid ids
    if(id >= particles_amount)
        return;

    // Computing the cell in which the current particle belongs and store its corresponding hash value
    spatial_keys[id] = hashCell(positionToCellCoordinates(predicted_positions[id]));
}

[numthreads(thread_group_size, 1, 1)]
void calculatePredictedPosition(uint id : SV_DispatchThreadID)
{
    // Computing the predicted position
    predicted_positions[id] = positions[id] + velocities[id] * delta_time + float3(0, -1, 0) * gravity;
}

[numthreads(thread_group_size, 1, 1)]
void calculateDensity(uint target_particle_index : SV_DispatchThreadID)
{
    // Initializing the density of the target particle
    float density = 0.0f;

    // Linear scan of all the particles
    for(uint current_particle_index = 0; current_particle_index < particles_amount; current_particle_index++)
    {
        // Computing the vector between the current particle and the target
        float3 diff_vector = predicted_positions[current_particle_index] - predicted_positions[target_particle_index];

        // Computing the squared distance
        float sqr_distance = dot(diff_vector, diff_vector);

        // If the particle is outside kernel radius, continue
        if(sqr_distance >= sqr_kernel_radius)
            continue;

        // Adding the current particle influence to the target particle density
        density += particle_mass * poly6(sqr_distance);
    }

    // Updating target particle density
    densities[target_particle_index] = density;
}

[numthreads(thread_group_size, 1, 1)]
void calculateDeltaVelocity(uint target_particle_index : SV_DispatchThreadID)
{
    // Initializing the new acceleration of the target particle
    float3 force = 0.0f;

    // Linear scan of all the particles
    for(uint current_particle_index = 0; current_particle_index < particles_amount; current_particle_index++)
    {
        // Skipping calculation for the particle by itself
        if(target_particle_index == current_particle_index)
            continue;
        
        // Computing the vector between the current particle and the target
        float3 diff_vector = predicted_positions[current_particle_index] - predicted_positions[target_particle_index];

        // Computing the squared distance
        float sqr_distance = dot(diff_vector, diff_vector);

        // If the particle is outside kernel radius, continue
        if(sqr_distance >= sqr_kernel_radius || sqr_distance == 0)
            continue;

        // Computing the distance
        float distance = sqrt(sqr_distance);
        
        // Computing the viscosity's influence of the current particle
        float viscosity_influence = viscosity_laplacian(distance);

        // Computing the difference between velocities
        float3 velocities_difference = velocities[current_particle_index] - velocities[target_particle_index];
        
        // Adding the result to the force
        force += particle_mass * viscosity_influence * viscosity * velocities_difference
            / densities[current_particle_index];

        // Computing the direction between the current particle and the point of interest
        float3 pressure_direction;
        if(distance == 0)
        {
            pressure_direction = float3(1, 0, 0);
        }
        else
        {
            pressure_direction =  diff_vector / distance;
        }

        // Evaluating the slope of the kernel at the given distance
        float kernel_slope = spiky_gradient(distance);
        
        // Computing the shared pressure force
        float shared_pressure = calculateSharedPressure(densities[current_particle_index],
            densities[target_particle_index]);

        // Computing the applied force using both pressure and viscosity
        force += particle_mass * shared_pressure * kernel_slope * pressure_direction
            / densities[current_particle_index];
    }

    // Computing the acceleration caused by the density field forces and multiplying it by delta time
    velocities[target_particle_index] += (force / densities[target_particle_index] + float3(0, -1, 0) * gravity)
        * delta_time;
    
    // Updating the position of the particle
    positions[target_particle_index] += velocities[target_particle_index] * delta_time;
    
    // Collision detection
    resolveCollision(target_particle_index);
}